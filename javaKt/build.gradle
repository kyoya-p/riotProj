buildscript {
    ext.kotlin_version = '1.4.10'
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
        //maven { url "http://10.36.102.80:8080/repository/internal" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:5.2.0"
    }
}


apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'

//sourceCompatibility = '11.0'
//targetCompatibility = '11.0'
apply plugin: 'com.github.johnrengelman.shadow'

shadowJar { mergeServiceFiles() }

repositories {
    jcenter()
    mavenCentral()
}
configurations {
    invoker
}

dependencies {
    // Every function needs this dependency to get the Functions Framework API.
    compileOnly 'com.google.cloud.functions:functions-framework-api:1.0.1'

    // To run function locally using Functions Framework's local invoker
    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.0.0-alpha-2-rc5'

    // These dependencies are only used by the tests.
    testImplementation 'com.google.cloud.functions:functions-framework-api:1.0.1'
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.google.truth:truth:1.0.1'
    testImplementation 'org.mockito:mockito-core:3.4.0'

}

// Register a "runFunction" task to run the function locally
tasks.register("runFunction", JavaExec) {
    main = 'com.google.cloud.functions.invoker.runner.Invoker'
    classpath(configurations.invoker)
    inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
    args(
            '--target', project.findProperty('runFunction.target') ?: '',
            '--port', project.findProperty('runFunction.port') ?: 8080
    )
    doFirst {
        args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
    }
}


